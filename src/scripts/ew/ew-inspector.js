// Generated by CoffeeScript 1.10.0
(function () {
  var extend = function (child, parent) {
    for (var key in parent) {
      if (hasProp.call(parent, key))
        child[key] = parent[key];
    }
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.__super__ = parent.prototype;
    return child;
  },
          hasProp = {}.hasOwnProperty,
          bind = function (fn, me) {
            return function () {
              return fn.apply(me, arguments);
            };
          };

  ContentTools.InspectorUI = (function (superClass) {
    extend(InspectorUI, superClass);

    function InspectorUI(app, root) {
      InspectorUI.__super__.constructor.call(this);
      this._tagUIs = [];
      this._app = app;
      this._root = root;
    }

    InspectorUI.prototype.mount = function () {
      var inspectorUI = this;
      this._domElement = this.constructor.createDiv(['ct-widget', 'ct-top-inspector']);
      this.parent().domElement().appendChild(this._domElement);
      this._domTags = this.constructor.createDiv(['ct-inspector__tags', 'ct-tags']);
      this._domElement.appendChild(this._domTags);
      this._addDOMEventListeners();
      this._handleFocusChange = function () {
        return inspectorUI.updateTags();
      };

      this._root.bind('blur', this._handleFocusChange);
      this._root.bind('focus', this._handleFocusChange);
      return this._root.bind('mount', this._handleFocusChange);
    };

    InspectorUI.prototype.unmount = function () {
      InspectorUI.__super__.unmount.call(this);
      this._domTags = null;
      this._root.unbind('blur', this._handleFocusChange);
      this._root.unbind('focus', this._handleFocusChange);
      return this._root.unbind('mount', this._handleFocusChange);
    };

    InspectorUI.prototype.updateTags = function () {
      var element, elements, i, j, len, len1, ref, results, tag;
      element = this._root.focused();
      ref = this._tagUIs;
      for (i = 0, len = ref.length; i < len; i++) {
        tag = ref[i];
        tag.unmount();
      }
      this._tagUIs = [];
      if (!element) {
        return;
      }
      elements = element.parents();
      elements.reverse();
      elements.push(element);
      results = [];
      for (j = 0, len1 = elements.length; j < len1; j++) {
        element = elements[j];
        if (ContentTools.INSPECTOR_IGNORED_ELEMENTS.indexOf(element.constructor.name) !== -1) {
          continue;
        }
        tag = new ContentTools.TagUI(element, this._app);
        this._tagUIs.push(tag);
        results.push(tag.mount(this._domTags));
      }
      return results;
    };

    return InspectorUI;

  })(ContentTools.WidgetUI);

  ContentTools.TagUI = (function (superClass) {
    extend(TagUI, superClass);

    function TagUI(element1, app) {
      this.element = element1;
      this._app = app;
      this._onMouseDown = bind(this._onMouseDown, this);
      TagUI.__super__.constructor.call(this);
    }

    TagUI.prototype.mount = function (domParent, before) {
      if (before == null) {
        before = null;
      }
      this._domElement = this.constructor.createDiv(['ct-tag']);
      this._domElement.textContent = this.element.tagName();
      return TagUI.__super__.mount.call(this, domParent, before);
    };

    TagUI.prototype._addDOMEventListeners = function () {
      return this._domElement.addEventListener('mousedown', this._onMouseDown);
    };

    TagUI.prototype._onMouseDown = function (ev) {
      var app, dialog, modal;
      ev.preventDefault();
      if (this.element.storeState) {
        this.element.storeState();
      }
      app = this._app;
      modal = new ContentTools.ModalUI();
      dialog = new ContentTools.PropertiesDialog(this.element);
      dialog.bind('cancel', (function (_this) {
        return function () {
          dialog.unbind('cancel');
          modal.hide();
          dialog.hide();
          if (_this.element.restoreState) {
            return _this.element.restoreState();
          }
        };
      })(this));
      dialog.bind('save', (function (_this) {
        return function (attributes, styles, innerHTML) {
          var applied, className, classNames, cssClass, element, i, j, len, len1, name, ref, ref1, value;
          dialog.unbind('save');
          for (name in attributes) {
            value = attributes[name];
            if (name === 'class') {
              if (value === null) {
                value = '';
              }
              classNames = {};
              ref = value.split(' ');
              for (i = 0, len = ref.length; i < len; i++) {
                className = ref[i];
                className = className.trim();
                if (!className) {
                  continue;
                }
                classNames[className] = true;
                if (!_this.element.hasCSSClass(className)) {
                  _this.element.addCSSClass(className);
                }
              }
              ref1 = _this.element.attr('class').split(' ');
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                className = ref1[j];
                className = className.trim();
                if (classNames[className] === void 0) {
                  _this.element.removeCSSClass(className);
                }
              }
            } else {
              if (value === null) {
                _this.element.removeAttr(name);
              } else {
                _this.element.attr(name, value);
              }
            }
          }
          for (cssClass in styles) {
            applied = styles[cssClass];
            if (applied) {
              _this.element.addCSSClass(cssClass);
            } else {
              _this.element.removeCSSClass(cssClass);
            }
          }
          if (innerHTML !== null) {
            if (innerHTML !== dialog.getElementInnerHTML()) {
              element = _this.element;
              if (!element.content) {
                element = element.children[0];
              }
              element.content = new HTMLString.String(innerHTML, element.content.preserveWhitespace());
              element.updateInnerHTML();
              element.taint();
              element.selection(new ContentSelect.Range(0, 0));
              element.storeState();
            }
          }
          modal.hide();
          dialog.hide();
          if (_this.element.restoreState) {
            return _this.element.restoreState();
          }
        };
      })(this));
      app.attach(modal);
      app.attach(dialog);
      modal.show();
      return dialog.show();
    };

    return TagUI;

  })(ContentTools.AnchoredComponentUI);

}).call(this);

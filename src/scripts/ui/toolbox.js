// Generated by CoffeeScript 1.10.0
(function () {
  var bind = function (fn, me) {
    return function () {
      return fn.apply(me, arguments);
    };
  },
          extend = function (child, parent) {
            for (var key in parent) {
              if (hasProp.call(parent, key))
                child[key] = parent[key];
            }
            function ctor() {
              this.constructor = child;
            }
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
          },
          hasProp = {}.hasOwnProperty;

  ContentTools.ToolboxUI = (function (superClass) {
    extend(ToolboxUI, superClass);

    function ToolboxUI(tools) {
      this._onStopDragging = bind(this._onStopDragging, this);
      this._onStartDragging = bind(this._onStartDragging, this);
      this._onDrag = bind(this._onDrag, this);
      ToolboxUI.__super__.constructor.call(this);
      this._tools = tools;
      this._dragging = false;
      this._draggingOffset = null;
      this._domGrip = null;
      this._toolUIs = {};
    }

    ToolboxUI.prototype.isDragging = function () {
      return this._dragging;
    };

    ToolboxUI.prototype.hide = function () {
      this._removeDOMEventListeners();
      return ToolboxUI.__super__.hide.call(this);
    };

    ToolboxUI.prototype.tools = function (tools) {
      if (tools === void 0) {
        return this._tools;
      }
      this._tools = tools;
      this.unmount();
      return this.mount();
    };

    ToolboxUI.prototype.mount = function () {
      var coord, domToolGroup, i, j, k, len, len1, position, ref, restore, tool, toolGroup, toolName;
      this._domElement = this.constructor.createDiv(['ct-widget', 'ct-top-toolbox', 'ce-element--type-static']);
      this.parent().domElement().appendChild(this._domElement);
      this._domGrip = this.constructor.createDiv(['ct-toolbox__grip', 'ct-grip']);
      //this._domElement.appendChild(this._domGrip);
      this._domGrip.appendChild(this.constructor.createDiv(['ct-grip__bump']));
      this._domGrip.appendChild(this.constructor.createDiv(['ct-grip__bump']));
      this._domGrip.appendChild(this.constructor.createDiv(['ct-grip__bump']));
      ref = this._tools;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        toolGroup = ref[i];
        domToolGroup = this.constructor.createDiv(['ct-tool-group']);
        this._domElement.appendChild(domToolGroup);
        for (k = 0, len1 = toolGroup.length; k < len1; k++) {
          toolName = toolGroup[k];
          tool = ContentTools.ToolShelf.fetch(toolName);
          this._toolUIs[toolName] = new ContentTools.ToolUI(tool);
          this._toolUIs[toolName].mount(domToolGroup);
          this._toolUIs[toolName].disabled(true);
          this._toolUIs[toolName].bind('apply', (function (_this) {
            return function () {
              return _this.updateTools();
            };
          })(this));
        }
      }
      restore = window.localStorage.getItem('ct-toolbox-position');
      if (restore && /^\d+,\d+$/.test(restore)) {
        position = (function () {
          var l, len2, ref1, results;
          ref1 = restore.split(',');
          results = [];
          for (l = 0, len2 = ref1.length; l < len2; l++) {
            coord = ref1[l];
            results.push(parseInt(coord));
          }
          return results;
        })();
        this._domElement.style.left = position[0] + "px";
        this._domElement.style.top = position[1] + "px";
        this._contain();
      }
      return this._addDOMEventListeners();
    };

    ToolboxUI.prototype.updateTools = function () {
      var element, name, ref, results, selection, toolUI;
      element = ContentEdit.Root.get().focused();
      selection = null;
      if (element && element.selection) {
        selection = element.selection();
      }
      ref = this._toolUIs;
      results = [];
      for (name in ref) {
        toolUI = ref[name];
        results.push(toolUI.update(element, selection));
      }
      return results;
    };

    ToolboxUI.prototype.unmount = function () {
      ToolboxUI.__super__.unmount.call(this);
      return this._domGrip = null;
    };

    ToolboxUI.prototype._addDOMEventListeners = function () {
      this._domGrip.addEventListener('mousedown', this._onStartDragging);
      this._handleResize = (function (_this) {
        return function (ev) {
          var containResize;
          if (_this._resizeTimeout) {
            clearTimeout(_this._resizeTimeout);
          }
          containResize = function () {
            return _this._contain();
          };
          return _this._resizeTimeout = setTimeout(containResize, 250);
        };
      })(this);
      window.addEventListener('resize', this._handleResize);
      this._updateTools = (function (_this) {
        return function () {
          var app, element, name, ref, results, selection, toolUI, update;
          app = ContentTools.EditorApp.get();
          update = false;
          element = ContentEdit.Root.get().focused();
          selection = null;
          if (element === _this._lastUpdateElement) {
            if (element && element.selection) {
              selection = element.selection();
              if (_this._lastUpdateSelection && selection.eq(_this._lastUpdateSelection)) {
                update = true;
              }
            }
          } else {
            update = true;
          }
          if (app.history) {
            if (_this._lastUpdateHistoryLength !== app.history.length()) {
              update = true;
            }
            _this._lastUpdateHistoryLength = app.history.length();
          }
          _this._lastUpdateElement = element;
          _this._lastUpdateSelection = selection;
          ref = _this._toolUIs;
          results = [];
          for (name in ref) {
            toolUI = ref[name];
            results.push(toolUI.update(element, selection));
          }
          return results;
        };
      })(this);
      this._updateToolsTimeout = setInterval(this._updateTools, 100);
      this._handleKeyDown = (function (_this) {
        return function (ev) {
          var element, os, redo, undo, version;
          if (ev.keyCode === 46) {
            element = ContentEdit.Root.get().focused();
            if (element && !element.content) {
              ContentTools.Tools.Remove.apply(element, null, function () {});
            }
          }
          version = navigator.appVersion;
          os = 'linux';
          if (version.indexOf('Mac') !== -1) {
            os = 'mac';
          } else if (version.indexOf('Win') !== -1) {
            os = 'windows';
          }
          redo = false;
          undo = false;
          switch (os) {
            case 'linux':
              if (ev.keyCode === 90 && ev.ctrlKey) {
                redo = ev.shiftKey;
                undo = !redo;
              }
              break;
            case 'mac':
              if (ev.keyCode === 90 && ev.metaKey) {
                redo = ev.shiftKey;
                undo = !redo;
              }
              break;
            case 'windows':
              if (ev.keyCode === 89 && ev.ctrlKey) {
                redo = true;
              }
              if (ev.keyCode === 90 && ev.ctrlKey) {
                undo = true;
              }
          }
          if (undo && ContentTools.Tools.Undo.canApply(null, null)) {
            ContentTools.Tools.Undo.apply(null, null, function () {});
          }
          if (redo && ContentTools.Tools.Redo.canApply(null, null)) {
            return ContentTools.Tools.Redo.apply(null, null, function () {});
          }
        };
      })(this);
      return window.addEventListener('keydown', this._handleKeyDown);
    };

    ToolboxUI.prototype._contain = function () {
      var rect;
      if (!this.isMounted()) {
        return;
      }
      rect = this._domElement.getBoundingClientRect();
      if (rect.left + rect.width > window.innerWidth) {
        this._domElement.style.left = (window.innerWidth - rect.width) + "px";
      }
      if (rect.top + rect.height > window.innerHeight) {
        this._domElement.style.top = (window.innerHeight - rect.height) + "px";
      }
      if (rect.left < 0) {
        this._domElement.style.left = '0px';
      }
      if (rect.top < 0) {
        this._domElement.style.top = '0px';
      }
      rect = this._domElement.getBoundingClientRect();
      return window.localStorage.setItem('ct-toolbox-position', rect.left + "," + rect.top);
    };

    ToolboxUI.prototype._removeDOMEventListeners = function () {
      if (this.isMounted()) {
        this._domGrip.removeEventListener('mousedown', this._onStartDragging);
      }
      window.removeEventListener('keydown', this._handleKeyDown);
      window.removeEventListener('resize', this._handleResize);
      window.removeEventListener('resize', this._handleResize);
      return clearInterval(this._updateToolsTimeout);
    };

    ToolboxUI.prototype._onDrag = function (ev) {
      ContentSelect.Range.unselectAll();
      this._domElement.style.left = (ev.clientX - this._draggingOffset.x) + "px";
      return this._domElement.style.top = (ev.clientY - this._draggingOffset.y) + "px";
    };

    ToolboxUI.prototype._onStartDragging = function (ev) {
      var rect;
      ev.preventDefault();
      if (this.isDragging()) {
        return;
      }
      this._dragging = true;
      this.addCSSClass('ct-toolbox--dragging');
      rect = this._domElement.getBoundingClientRect();
      this._draggingOffset = {
        x: ev.clientX - rect.left,
        y: ev.clientY - rect.top
      };
      document.addEventListener('mousemove', this._onDrag);
      document.addEventListener('mouseup', this._onStopDragging);
      return ContentEdit.addCSSClass(document.body, 'ce--dragging');
    };

    ToolboxUI.prototype._onStopDragging = function (ev) {
      if (!this.isDragging()) {
        return;
      }
      this._contain();
      document.removeEventListener('mousemove', this._onDrag);
      document.removeEventListener('mouseup', this._onStopDragging);
      this._draggingOffset = null;
      this._dragging = false;
      this.removeCSSClass('ct-toolbox--dragging');
      return ContentEdit.removeCSSClass(document.body, 'ce--dragging');
    };

    return ToolboxUI;

  })(ContentTools.WidgetUI);

  ContentTools.ToolUI = (function (superClass) {
    extend(ToolUI, superClass);

    function ToolUI(tool) {
      this._onMouseUp = bind(this._onMouseUp, this);
      this._onMouseLeave = bind(this._onMouseLeave, this);
      this._onMouseDown = bind(this._onMouseDown, this);
      this._addDOMEventListeners = bind(this._addDOMEventListeners, this);
      ToolUI.__super__.constructor.call(this);
      this.tool = tool;
      this._mouseDown = false;
      this._disabled = false;
    }

    ToolUI.prototype.apply = function (element, selection) {
      var callback;
      if (!this.tool.canApply(element, selection)) {
        return;
      }
      callback = (function (_this) {
        return function (applied) {
          if (applied) {
            return _this.trigger('apply');
          }
        };
      })(this);
      return this.tool.apply(element, selection, callback);
    };

    ToolUI.prototype.disabled = function (disabledState) {
      if (disabledState === void 0) {
        return this._disabled;
      }
      if (this._disabled === disabledState) {
        return;
      }
      this._disabled = disabledState;
      if (disabledState) {
        this._mouseDown = false;
        this.addCSSClass('ct-tool--disabled');
        return this.removeCSSClass('ct-tool--applied');
      } else {
        return this.removeCSSClass('ct-tool--disabled');
      }
    };

    ToolUI.prototype.mount = function (domParent, before) {
      if (before == null) {
        before = null;
      }
      this._domElement = this.constructor.createDiv(['ct-tool', "ct-tool--" + this.tool.icon]);
      this._domElement.setAttribute('data-tooltip', ContentEdit._(this.tool.label));
      if (this.tool.title)
        this._domElement.innerHTML = this.tool.title;
      return ToolUI.__super__.mount.call(this, domParent, before);
    };

    ToolUI.prototype.update = function (element, selection) {
      if (!(element && element.isMounted())) {
        this.disabled(true);
        return;
      }
      if (this.tool.canApply(element, selection)) {
        this.disabled(false);
      } else {
        this.disabled(true);
        return;
      }
      if (this.tool.isApplied(element, selection)) {
        return this.addCSSClass('ct-tool--applied');
      } else {
        return this.removeCSSClass('ct-tool--applied');
      }
    };

    ToolUI.prototype._addDOMEventListeners = function () {
      this._domElement.addEventListener('mousedown', this._onMouseDown);
      this._domElement.addEventListener('mouseleave', this._onMouseLeave);
      return this._domElement.addEventListener('mouseup', this._onMouseUp);
    };

    ToolUI.prototype._onMouseDown = function (ev) {
      ev.preventDefault();
      if (this.disabled()) {
        return;
      }
      this._mouseDown = true;
      return this.addCSSClass('ct-tool--down');
    };

    ToolUI.prototype._onMouseLeave = function () {
      this._mouseDown = false;
      return this.removeCSSClass('ct-tool--down');
    };

    ToolUI.prototype._onMouseUp = function () {
      var element, selection;
      if (this._mouseDown) {
        element = ContentEdit.Root.get().focused();
        if (!(element && element.isMounted())) {
          return;
        }
        selection = null;
        if (element.selection) {
          selection = element.selection();
        }
        this.apply(element, selection);
      }
      this._mouseDown = false;
      return this.removeCSSClass('ct-tool--down');
    };

    return ToolUI;

  })(ContentTools.AnchoredComponentUI);

}).call(this);
